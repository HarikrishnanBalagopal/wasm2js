const MAX_FRAMES=4096;export const instantiate=(compiledJSCode,importObject)=>{const createInstance=eval(compiledJSCode);return createInstance(importObject)};class Player extends AudioWorkletProcessor{constructor(e){super(e),console.log("Hi! from audio worklet options:",e),this.mem=null,this.run=null,this.channels=null,this.playing=!1,this.sampleRate=e.processorOptions.sampleRate,this.module=e.processorOptions.module,this.port.onmessage=this.onmessage.bind(this)}onmessage(e){switch(e.data.msg){case"load":this.load(e.data.file);break;case"play":this.playing=e.data.value}}async load(e){console.log("worklet.js - load - file:",e);const t=1+Math.ceil(e.byteLength/65536),s=65536*t;console.log("NUM_PAGES",t,"MEM_SIZE",s),this.mem=new Uint8Array(s),this.channels=[new Float32Array(this.mem.buffer,4096,MAX_FRAMES),new Float32Array(this.mem.buffer,4096+4*MAX_FRAMES,MAX_FRAMES)],new Uint8Array(this.mem.buffer,65536).set(new Uint8Array(e));const n={"":{rate:sampleRate,init:e=>this.port.postMessage({msg:"init",channels:e}),draw:(e,t)=>this.port.postMessage({msg:"draw",pattern:e,row:t}),mem:this.mem}},o=instantiate(this.module,n);this.run=o.exports.run}process(e,t,s){if(this.run&&this.playing){const e=t[0];let s=0,n=e[0].length;for(;s<n;){const t=Math.min(e[0].length,MAX_FRAMES);this.run(t);for(let n=0;n<e.length;++n)e[n].set(this.channels[n].subarray(0,t),s);s+=t}}return!0}}registerProcessor("player",Player);